// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package rungrpc

import (
	"github.com/google/wire"
	"github.com/tuandq2112/go-microservices/shared/locale"
	"github.com/tuandq2112/go-microservices/shared/logger"
	"github.com/tuandq2112/go-microservices/user-service/infrastructure/repository/memory"
	"github.com/tuandq2112/go-microservices/user-service/infrastructure/server"
	"github.com/tuandq2112/go-microservices/user-service/internal/domain"
	"github.com/tuandq2112/go-microservices/user-service/internal/interfaces/handler"
	"github.com/tuandq2112/go-microservices/user-service/internal/usecase"
)

// Injectors from wire.go:

func InitializeApp() (*server.GRPCServer, error) {
	userRepository := memory.NewUserRepository()
	userUsecase := usecase.NewUserUsecase(userRepository)
	userHandler := handler.NewUserHandler(userUsecase)
	loggerLogger, err := logger.InitLogger()
	if err != nil {
		return nil, err
	}
	locale := provideLocale()
	grpcServer := &server.GRPCServer{
		Handler: userHandler,
		Logger:  loggerLogger,
		Locale:  locale,
	}
	return grpcServer, nil
}

// wire.go:

var userSet = wire.NewSet(memory.NewUserRepository, usecase.NewUserUsecase, handler.NewUserHandler, wire.Bind(new(domain.UserRepository), new(*memory.UserRepository)))

func provideLocale() *locale.Locale {
	return locale.Init("user-service/resources/locales")
}
