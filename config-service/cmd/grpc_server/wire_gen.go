// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package grpcserver

import (
	"github.com/google/wire"
	config4 "github.com/tuandq2112/go-microservices/config-service/internal/domain/config"
	"github.com/tuandq2112/go-microservices/config-service/internal/infrastructure/config"
	"github.com/tuandq2112/go-microservices/config-service/internal/interface/grpc"
	config3 "github.com/tuandq2112/go-microservices/config-service/internal/interface/handler/config"
	config2 "github.com/tuandq2112/go-microservices/config-service/internal/usecase/config"
	"github.com/tuandq2112/go-microservices/shared/discovery"
)

// Injectors from wire.go:

func InitializeServer() (*grpc.GrpcServer, error) {
	configLoader := config.NewConfigLoader()
	configUseCase := config2.NewConfigUseCase(configLoader)
	configHandler := config3.NewConfigHandler(configUseCase)
	consulRegistrar, err := discovery.NewConsulRegistrar()
	if err != nil {
		return nil, err
	}
	grpcServer, err := grpc.NewGrpcServer(configHandler, consulRegistrar)
	if err != nil {
		return nil, err
	}
	return grpcServer, nil
}

// wire.go:

var configSet = wire.NewSet(config.NewConfigLoader, config2.NewConfigUseCase, config3.NewConfigHandler, wire.Bind(new(config4.ConfigRepository), new(*config.ConfigLoader)), wire.Bind(new(config3.ConfigUseCase), new(*config2.ConfigUseCase)))

var discoverySet = wire.NewSet(discovery.NewConsulRegistrar)
